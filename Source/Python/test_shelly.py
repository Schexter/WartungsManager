#!/usr/bin/env python3
"""
Schnelltest f√ºr Shelly-Integration
"""

import sys
import requests
import json
from pathlib import Path

def test_basic_requirements():
    """Teste Basis-Anforderungen"""
    print("\nüîç Teste Basis-Anforderungen...")
    
    # Python-Version
    print(f"   Python: {sys.version.split()[0]} ‚úÖ")
    
    # Requests
    try:
        import requests
        print(f"   Requests: {requests.__version__} ‚úÖ")
    except ImportError:
        print("   Requests: ‚ùå FEHLT! Installieren mit: pip install requests")
        return False
    
    # python-dotenv
    try:
        import dotenv
        print(f"   Python-dotenv: ‚úÖ")
    except ImportError:
        print("   Python-dotenv: ‚ùå FEHLT! Installieren mit: pip install python-dotenv")
        return False
    
    return True

def test_shelly_config():
    """Teste Shelly-Konfiguration"""
    print("\nüìã Teste Shelly-Konfiguration...")
    
    config_file = Path(__file__).parent / "shelly_devices.json"
    
    if not config_file.exists():
        print("   ‚ùå Keine Konfiguration gefunden!")
        print("      F√ºhren Sie aus: python shelly_discovery.py")
        return False
    
    with open(config_file, 'r') as f:
        devices = json.load(f)
    
    print(f"   ‚úÖ {len(devices)} Ger√§te konfiguriert")
    
    kompressor = next((d for d in devices if d['role'] == 'kompressor'), None)
    if kompressor:
        print(f"   ‚úÖ Kompressor: {kompressor['custom_name']} ({kompressor['ip']})")
    else:
        print("   ‚ö†Ô∏è  Kein Kompressor-Shelly zugewiesen")
    
    widgets = [d for d in devices if d['role'] == 'widget']
    if widgets:
        print(f"   ‚úÖ Widgets: {len(widgets)} Ger√§te")
    
    return True

def test_shelly_connection():
    """Teste Verbindung zu Shellys"""
    print("\nüîå Teste Shelly-Verbindungen...")
    
    config_file = Path(__file__).parent / "shelly_devices.json"
    if not config_file.exists():
        return False
    
    with open(config_file, 'r') as f:
        devices = json.load(f)
    
    online_count = 0
    offline_count = 0
    
    for device in devices:
        try:
            # Test-Request
            if device['gen'] == 2:
                url = f"http://{device['ip']}/rpc/Shelly.GetStatus"
                response = requests.post(url, json={"id": 1}, timeout=1)
            else:
                url = f"http://{device['ip']}/status"
                response = requests.get(url, timeout=1)
            
            if response.status_code == 200:
                print(f"   ‚úÖ {device['custom_name']}: Online")
                online_count += 1
            else:
                print(f"   ‚ùå {device['custom_name']}: HTTP {response.status_code}")
                offline_count += 1
        except:
            print(f"   ‚ùå {device['custom_name']}: Offline")
            offline_count += 1
    
    print(f"\n   Zusammenfassung: {online_count} online, {offline_count} offline")
    return online_count > 0

def test_flask_integration():
    """Teste Flask-Integration"""
    print("\nüåê Teste Flask-Integration...")
    
    try:
        # Teste ob Server l√§uft
        response = requests.get("http://localhost:5000/health", timeout=2)
        if response.status_code == 200:
            print("   ‚úÖ WartungsManager l√§uft auf Port 5000")
            
            # Teste Shelly-Dashboard
            response = requests.get("http://localhost:5000/shelly/dashboard", timeout=2)
            if response.status_code == 200:
                print("   ‚úÖ Shelly-Dashboard erreichbar")
            else:
                print("   ‚ö†Ô∏è  Dashboard nicht erreichbar")
        else:
            print("   ‚ùå Server antwortet nicht korrekt")
    except:
        print("   ‚ö†Ô∏è  Server l√§uft nicht")
        print("      Starten mit: python run_production.py")
    
    return True

def main():
    """Haupttest"""
    print("="*60)
    print("     WartungsManager - Shelly Integration Test")
    print("="*60)
    
    # Tests durchf√ºhren
    tests_passed = 0
    tests_total = 4
    
    if test_basic_requirements():
        tests_passed += 1
    
    if test_shelly_config():
        tests_passed += 1
    
    if test_shelly_connection():
        tests_passed += 1
    
    if test_flask_integration():
        tests_passed += 1
    
    # Ergebnis
    print("\n" + "="*60)
    print(f"     Testergebnis: {tests_passed}/{tests_total} Tests bestanden")
    print("="*60)
    
    if tests_passed == tests_total:
        print("\n‚úÖ Alle Tests bestanden! System bereit.")
    elif tests_passed >= 2:
        print("\n‚ö†Ô∏è  Einige Tests fehlgeschlagen. Grundfunktionen verf√ºgbar.")
    else:
        print("\n‚ùå Kritische Tests fehlgeschlagen. Setup erforderlich!")
        print("\nN√§chste Schritte:")
        print("1. python shelly_discovery.py      # Shellys einrichten")
        print("2. python run_production.py        # Server starten")

if __name__ == "__main__":
    main()

# Erstellt von Hans Hahn - Alle Rechte vorbehalten
