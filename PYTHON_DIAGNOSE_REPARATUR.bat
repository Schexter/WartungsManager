@echo off
setlocal enabledelayedexpansion
echo ========================================
echo üêç PYTHON DIAGNOSE UND REPARATUR
echo ========================================
echo.

echo üìä SYSTEM ANALYSE...
echo =====================================

echo.
echo üîç 1. PYTHON-INSTALLATIONEN ERKENNEN
echo -------------------------------------
echo Suche nach Python-Installationen...

where python >nul 2>&1
if !errorlevel! equ 0 (
    echo ‚úÖ 'python' Befehl erkannt
    python --version
) else (
    echo ‚ùå 'python' Befehl NICHT erkannt
)

where py >nul 2>&1
if !errorlevel! equ 0 (
    echo ‚úÖ 'py' Launcher erkannt
    py --version
    echo.
    echo Verf√ºgbare Python-Versionen:
    py -0
) else (
    echo ‚ùå 'py' Launcher NICHT erkannt
)

echo.
echo üîç 2. REGISTRY-PR√úFUNG
echo ------------------------
echo Suche Python in Registry...
reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Python" /s >nul 2>&1
if !errorlevel! equ 0 (
    echo ‚úÖ Python in Registry gefunden
    reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore" 2>nul
) else (
    echo ‚ùå Python NICHT in Registry
)

echo.
echo üîç 3. PFAD-ANALYSE
echo ------------------
echo Aktuelle PATH-Variable:
echo %PATH% | findstr /i python
if !errorlevel! equ 0 (
    echo ‚úÖ Python-Pfade in PATH gefunden
) else (
    echo ‚ùå Keine Python-Pfade in PATH
)

echo.
echo üîç 4. MANUELLE INSTALLATION SUCHEN
echo ----------------------------------
if exist "C:\Python311\python.exe" (
    echo ‚úÖ Python 3.11 gefunden: C:\Python311\python.exe
    "C:\Python311\python.exe" --version
    set "MANUAL_PYTHON_PATH=C:\Python311"
) else (
    echo ‚ùå Python 3.11 nicht in C:\Python311
)

if exist "C:\Users\%USERNAME%\AppData\Local\Programs\Python\Python311\python.exe" (
    echo ‚úÖ Python 3.11 (Benutzer) gefunden: %USERPROFILE%\AppData\Local\Programs\Python\Python311\python.exe
    "%USERPROFILE%\AppData\Local\Programs\Python\Python311\python.exe" --version
    set "MANUAL_PYTHON_PATH=%USERPROFILE%\AppData\Local\Programs\Python\Python311"
) else (
    echo ‚ùå Python 3.11 nicht im Benutzerpfad
)

echo.
echo üîç 5. VIRTUAL ENVIRONMENT PR√úFUNG
echo ----------------------------------
cd /d "C:\SoftwareProjekte\WartungsManager\Source\Python"
if exist "wartung_env\Scripts\python.exe" (
    echo ‚úÖ Virtual Environment gefunden
    wartung_env\Scripts\python.exe --version
) else (
    echo ‚ùå Virtual Environment fehlt oder besch√§digt
)

echo.
echo ========================================
echo üîß REPARATUR-OPTIONEN
echo ========================================

if defined MANUAL_PYTHON_PATH (
    echo.
    echo Option 1: PFAD REPARIEREN
    echo ========================
    echo Python ist installiert aber nicht im PATH!
    echo.
    echo M√∂chten Sie den PATH automatisch reparieren? (j/n^)
    set /p repair_path="Ihre Wahl: "
    
    if /i "!repair_path!"=="j" (
        echo.
        echo üîß Repariere PATH...
        setx PATH "%PATH%;!MANUAL_PYTHON_PATH!;!MANUAL_PYTHON_PATH!\Scripts"
        echo ‚úÖ PATH repariert! Bitte PowerShell/CMD neu √∂ffnen.
        echo.
        goto venv_repair
    )
)

echo.
echo Option 2: VIRTUAL ENVIRONMENT REPARIEREN
echo =========================================
:venv_repair
if defined MANUAL_PYTHON_PATH (
    echo Verwende gefundene Python-Installation: !MANUAL_PYTHON_PATH!
    set "PYTHON_EXE=!MANUAL_PYTHON_PATH!\python.exe"
) else (
    echo Verwende Standard Python-Befehl...
    set "PYTHON_EXE=python"
)

echo.
echo M√∂chten Sie das Virtual Environment neu erstellen? (j/n^)
set /p repair_venv="Ihre Wahl: "

if /i "!repair_venv!"=="j" (
    echo.
    echo üîß Repariere Virtual Environment...
    
    if exist "wartung_env" (
        echo L√∂sche altes Virtual Environment...
        rmdir /s /q wartung_env
    )
    
    echo Erstelle neues Virtual Environment...
    "!PYTHON_EXE!" -m venv wartung_env
    
    if exist "wartung_env\Scripts\activate.bat" (