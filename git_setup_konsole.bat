@echo off
chcp 65001 > nul
echo ================================================================
echo    üîß WARTUNGSMANAGER - GIT KOMMANDOZEILEN SETUP üîß
echo ================================================================
echo.

:: Pr√ºfe ob Git installiert ist
where git >nul 2>nul
if %errorlevel% neq 0 (
    echo ‚ùå FEHLER: Git ist nicht installiert!
    echo.
    echo Bitte installiere Git von: https://git-scm.com/download/win
    echo.
    pause
    exit /b 1
)

echo ‚úÖ Git ist installiert
git --version
echo.

:: Wechsle ins Projektverzeichnis
cd /d "C:\SoftwareProjekte\WartungsManager"
echo üìÅ Arbeitsverzeichnis: %CD%
echo.

:: Git initialisieren
echo üîß Initialisiere Git Repository...
git init
echo.

:: Git Konfiguration
echo üë§ Aktuelle Git-Konfiguration:
git config --list | findstr user
echo.

:: Setze Benutzerdaten falls nicht vorhanden
git config user.name >nul 2>&1
if %errorlevel% neq 0 (
    echo Keine Git-Benutzerdaten gefunden. Bitte konfigurieren:
    set /p GIT_NAME="Dein Name: "
    set /p GIT_EMAIL="Deine E-Mail: "
    git config --global user.name "!GIT_NAME!"
    git config --global user.email "!GIT_EMAIL!"
    echo ‚úÖ Git-Benutzerdaten gesetzt
    echo.
)

:: Status anzeigen
echo üìä Repository Status:
git status --short
echo.

:: Dateien zum Staging hinzuf√ºgen
echo üìù F√ºge alle Dateien zum Staging-Bereich hinzu...
git add .
echo.

:: Zeige was committed wird
echo üìã Folgende Dateien werden committed:
git status --short
echo.

:: Commit erstellen
echo üíæ Erstelle Initial Commit...
git commit -m "Initial commit: WartungsManager v2.0 - Produktionsreifes Wartungs- und F√ºllstandsmanagement-System

Features:
- Flask-basierte Web-Anwendung (Python 3.11)
- Touch-optimierte UI f√ºr iPad/Tablet
- SQLite Datenbank mit Auto-Migration
- 62mm Thermodrucker Integration (ESC/POS)
- Automatisches NAS-Backup
- Kompressor-Steuerung und Protokollierung
- Multi-Client-f√§hig im Netzwerk
- Vollautomatische Windows-Installer

Technologie-Stack:
- Backend: Python 3.11 + Flask 2.3.3
- Frontend: HTML5 + Bootstrap 5
- Datenbank: SQLite + Alembic
- Deployment: Windows Service + Auto-Start

Status: PRODUKTIONSREIF"

echo.
echo ‚úÖ Initial Commit erstellt!
echo.

:: Branch umbenennen
echo üåø Benenne Branch zu 'main' um...
git branch -M main
echo.

:: GitHub Remote hinzuf√ºgen
echo ================================================================
echo              üåê GITHUB REMOTE EINRICHTEN üåê
echo ================================================================
echo.
echo OPTION 1: Neues Repository auf GitHub erstellen
echo -----------------------------------------------
echo 1. √ñffne https://github.com/new in deinem Browser
echo 2. Repository Name: WartungsManager
echo 3. Beschreibung: "Produktionsreifes Wartungs- und F√ºllstandsmanagement-System"
echo 4. W√§hle Private/Public nach Wunsch
echo 5. WICHTIG: KEINE Initialisierung mit README/.gitignore/License!
echo 6. Klicke "Create repository"
echo.
echo OPTION 2: Bestehendes Repository verwenden
echo ------------------------------------------
echo Verwende die URL deines bestehenden Repositories
echo.
echo Format: https://github.com/BENUTZERNAME/WartungsManager.git
echo     oder: git@github.com:BENUTZERNAME/WartungsManager.git
echo.
set /p REMOTE_URL="GitHub Repository URL eingeben (oder Enter f√ºr sp√§ter): "

if not "!REMOTE_URL!"=="" (
    echo.
    echo üîó F√ºge GitHub als Remote hinzu...
    git remote add origin !REMOTE_URL!
    
    echo.
    echo üöÄ Pushe zu GitHub...
    git push -u origin main
    
    if !errorlevel! equ 0 (
        echo.
        echo ‚úÖ ERFOLGREICH zu GitHub gepusht!
        echo.
        echo Repository URL: !REMOTE_URL!
    ) else (
        echo.
        echo ‚ö†Ô∏è  Push fehlgeschlagen. M√∂gliche Gr√ºnde:
        echo    - Repository existiert nicht
        echo    - Keine Berechtigung
        echo    - Falscher URL
        echo.
        echo Versuche manuell:
        echo    git remote set-url origin NEUE_URL
        echo    git push -u origin main
    )
) else (
    echo.
    echo ‚ÑπÔ∏è  Remote-Setup √ºbersprungen. Du kannst es sp√§ter hinzuf√ºgen mit:
    echo    git remote add origin https://github.com/DEINNAME/WartungsManager.git
    echo    git push -u origin main
)

echo.
echo ================================================================
echo                   üìö N√úTZLICHE GIT BEFEHLE üìö
echo ================================================================
echo.
echo ALLT√ÑGLICHE BEFEHLE:
echo   git status              - Zeige √Ñnderungen
echo   git add .               - F√ºge alle √Ñnderungen hinzu
echo   git commit -m "Text"    - Erstelle Commit
echo   git push                - Lade zu GitHub hoch
echo   git pull                - Hole √Ñnderungen von GitHub
echo.
echo BRANCHES:
echo   git branch              - Zeige Branches
echo   git checkout -b neu     - Erstelle neuen Branch
echo   git merge branch        - Merge Branch
echo.
echo HISTORIE:
echo   git log --oneline       - Zeige Commit-Historie
echo   git diff                - Zeige Unterschiede
echo.
echo ================================================================
echo.
pause

Erstellt von Hans Hahn - Alle Rechte vorbehalten
